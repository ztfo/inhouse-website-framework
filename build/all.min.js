'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

angular.module('ihframework', ['ngRoute', 'ui.bootstrap', 'templates', 'angular-owl-carousel']).run(["$http", "$rootScope", "userDataService", function ($http, $rootScope, userDataService) {
	$rootScope.theUserData = userDataService.userData;
	$rootScope.theWebsiteData = userDataService.storySettings;
}]).config(["$routeProvider", "$locationProvider", "$httpProvider", "userDataServiceProvider", function ($routeProvider, $locationProvider, $httpProvider, userDataServiceProvider) {
	console.log('config: ', userDataServiceProvider);

	$httpProvider.defaults.withCredentials = true;

	$routeProvider.when('/', {
		template: '<ih-landing-layout></ih-landing-layout>',
		controller: 'mainController'
	}).when('/search-mls', {
		templateUrl: 'build/templates/ip/results/' + (userDataServiceProvider.storyJson.resultsConfig || 's1') + '-results.htm',
		controller: 'searchController',
		reloadOnSearch: false
	}).when('/listing/:mls', {
		templateUrl: 'build/templates/ip/listing/' + (userDataServiceProvider.storyJson.listingConfig || 's1') + '-listing.htm',
		controller: 'listingController'
	}).when('/privacy', {
		templateUrl: 'build/templates/ip/system/' + (userDataServiceProvider.storyJson.privacyConfig || 's1') + '-visitor-privacy.htm',
		controller: 'privacyController'
	}).when('/missing', {
		templateUrl: 'build/templates/ip/system/404.htm'
	}).when('/:content', {
		templateUrl: 'build/templates/ip/content/' + (userDataServiceProvider.storyJson.contentConfig || 's1') + '-content.htm',
		controller: 'contentController'
	}).when('/bio/:agent/', {
		templateUrl: 'build/templates/ip/bios/' + (userDataServiceProvider.storyJson.bioConfig || 's1') + '-bios.htm',
		controller: 'bioController'
	}).when('/subdivision/:sub', {
		templateUrl: 'build/templates/ip/subdivisions/' + (userDataServiceProvider.storyJson.subdivConfig || 's1') + '-subdivision.inhouse.htm',
		controller: 'subdivisionController'
	}).when('/subdivision/:sub/floorplan/:floorplan', {
		templateUrl: 'build/templates/ip/subdivisions/' + (userDataServiceProvider.storyJson.subdivConfig || 's1') + '-subfloorplan.inhouse.htm',
		controller: 'subfloorplanController'
	}).otherwise({
		templateUrl: 'build/templates/ip/system/404.htm'
	});

	//	$locationProvider.html5Mode(true);
}]).controller('mainView', ['$rootScope', 'inhouseApi', '$scope', function ($rootScope, inhouseApi, $scope) {
	$rootScope.$on("$routeChangeSuccess", function (e, data) {
		$scope.$broadcast('viewChanged', data.controller);
	});
	$scope.agent = $rootScope.theUserData;
	$scope.story = $rootScope.theWebsiteData;
	$scope.freebies = true;
	$scope.max = $rootScope.theUserData.maxSearchNoLead || 3;

	if (typeof Storage !== 'undefined') {
		if (typeof localStorage.inhouseAgentUser !== 'undefined') {
			$scope.inhouseAgentUserLoggedIn = true;
		} else {
			$scope.inhouseAgentUserLoggedIn = false;
		}
	}

	if (typeof Storage !== 'undefined') {
		if (typeof localStorage.inhouseSearchFreebies !== 'undefined' && localStorage.inhouseSearchFreebies === 'false') {
			$scope.freebies = false;
		}
	}
	$scope.viewFreebies = function () {
		if (typeof Storage !== 'undefined') {
			if (typeof localStorage.inhouseSearchFreebies === 'undefined' && localStorage.inhouseSearchFreebies !== 'false') {
				localStorage.inhouseSearchFreebies = 'false';
				localStorage.inhouseSearchCount = 0;
				$scope.freebies = false;
				$('#accountModal').modal('hide');
			}
		}
	};
	$scope.submitRegister = function ($scope) {
		return function () {
			inhouseApi.getData({ resource: 'new-lead', name: $scope.name, email: $scope.email, phone: $scope.phone }).success(function (result) {
				if (typeof Storage !== 'undefined') {
					if (typeof result.id === 'undefined') {
						$scope.inhouseAgentUserLoggedIn = false;
						delete localStorage.inhouseAgentUser;
						$('#accountModal').attr('data-success-register', 'false');
						$scope.$broadcast('loginChanged', false);
					} else {
						$scope.inhouseAgentUserLoggedIn = true;
						$scope.$broadcast('loginChanged', true);
						localStorage.inhouseAgentUser = result.id;
						window.inhouseAgentUser = result.id;
						$('#accountModal').attr('data-success-register', 'true');
						$('#accountModal').modal('hide');
					}
				}
			});
		};
	}($scope);
	$scope.submitLogin = function ($scope) {
		return function () {
			inhouseApi.getData({ resource: 'new-lead', name: $scope.name, email: $scope.email, phone: $scope.phone }).success(function (result) {
				if (typeof Storage !== 'undefined') {
					if (typeof result.id === 'undefined') {
						$scope.inhouseAgentUserLoggedIn = false;
						delete localStorage.inhouseAgentUser;
						$('#accountModal').attr('data-success-register', 'false');
						$scope.$broadcast('loginChanged', false);
					} else {
						$scope.inhouseAgentUserLoggedIn = true;
						localStorage.inhouseAgentUser = result.id;
						window.inhouseAgentUser = result.id;
						$('#accountModal').attr('data-success-register', 'true');
						$('#accountModal').modal('hide');
						$scope.$broadcast('loginChanged', true);
					}
				}
			});
		};
	}($scope);
}]).directive('openTab', function () {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var href = element.href;
			if (attrs.ngHref.includes('http')) {
				// replace with your condition
				element.attr("target", "_blank");
			}
		}
	};
});

// back to top

$(document).ready(function () {
	$(window).scroll(function () {
		if ($(this).scrollTop() > 100) {
			$('.ih-scroll-up').fadeIn();
		} else {
			$('.ih-scroll-up').fadeOut();
		}
	});

	$('.ih-scroll-up').click(function () {
		$("html, body").animate({
			scrollTop: 0
		}, 600);
		return false;
	});
});

angular.module('ihframework').directive('ihAbout', function () {
	return {
		scope: {
			classes: "@classes"
		},
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		controller: ["$scope", "$rootScope", "userDataService", function controller($scope, $rootScope, userDataService) {

			$scope.config = userDataService.aboutConfig;
			$scope.theUrl = function () {
				return 'build/templates/ic/about/template/' + $scope.config + '-inhouse.about.htm';
			};
			$scope.agent = $rootScope.theUserData;
		}]
	};
});

angular.module('ihframework').directive('ihAboutListing', function () {
	return {
		scope: {
			classes: "@classes"
		},
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.theUrl = function (config) {
				config = 'p1';
				return 'build/templates/ic/about-listing/template/' + config + '-inhouse.about-listing.htm';
			};
			$scope.agent = $rootScope.theUserData;
		}]
	};
});

angular.module('ihframework').directive('ihAmenities', function () {
	return {
		scope: {
			classes: "@classes"
		},
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.theUrl = function (config) {
				config = 's1';
				return 'build/templates/ic/amenities/template/' + config + '-inhouse.amenities.htm';
			};
			$scope.agent = $rootScope.theUserData;
		}]
	};
});

angular.module('ihframework').directive('bootstrapSlider', ['$window', '$filter', '$routeParams', '$timeout', function ($window, $filter, $routeParams, $timeout) {
	return {
		restrict: 'E',
		require: 'ngModel',
		transclude: true,
		link: function link(scope, element, attrs, ngModelCtrl) {
			var format = function (attrs) {
				return function (value) {
					if (attrs.filter == 'price') {
						// this could be expanded easily to support other filter types.
						if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
							return [$filter('currency')(value[0], '$', 0), $filter('currency')(value[1], '$', 0)];
						} else {
							return $filter('currency')(value, '$', 0);
						}
					}
					return value;
				};
			}(attrs);

			$(element).slider({
				formatter: format,
				tooltip: 'always'
			});

			element.on('slideStop', function () {
				scope.val = $(this).slider('getValue').toString().replace(',', ';');
				ngModelCtrl.$setViewValue(scope.val);
				scope.$apply();
			});

			$timeout(function (scope, element, attrs) {
				return function () {
					$(element).css('display', 'inline');
					if (typeof scope.filters[attrs.filter] !== 'undefined') {
						var val = scope.filters[attrs.filter];
						var range = val.split(';');
						$(element).slider('setValue', [parseInt(range[0].replace(/[^0-9]/, '')), parseInt(range[1].replace(/[^0-9]/, ''))]); //todo: check if this has 1 or no parameters!
					}
				};
			}(scope, element, attrs));
		},
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.agent = $rootScope.theUserData;
		}]
	};
}]);

angular.module('ihframework').directive('ihContact', ['$timeout', function ($timeout) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		transclude: true,
		scope: {
			contactMessage: "@message",
			noButtons: "@noButtons",
			prefill: "@prefill",
			prefillPrefix: "@",
			classes: "@classes",
			typeofcontact: '@typeofcontact'
		},
		link: function link(scope, element, attrs) {
			if (typeof scope.contact == 'undefined') {
				scope.contact = {};
			}
			scope.config = attrs.config;
			scope.contact.typeofcontact = attrs.typeofcontact || "BuyAHome";
			scope.element = element;
			element.find('input[type="radio"]').each(function () {
				$(this).click(function () {
					$(this).parents('.btn-group').find('label').removeClass('active');
					$(this).parent('label').addClass('active');
				});
			});
		},
		controller: ['$rootScope', '$scope', 'inhouseApi', 'userDataService', function ($rootScope, $scope, inhouseApi, userDataService) {
			$scope.theUrl = function () {
				return 'build/templates/ic/contact/template/' + $scope.config + '-inhouse.contact.htm';
			};
			$timeout(function () {
				$scope.$broadcast('listingLoaded', { address: $rootScope.theUserData.contactAddress, zipcode: $rootScope.theUserData.contactAddress2 });
			});
			$scope.navbar = $rootScope.theWebsiteData.NavBar;
			$scope.agent = $rootScope.theUserData;
			$scope.inhouseApi = inhouseApi;
			$scope.scope = $scope;
			if (typeof $scope.contact == 'undefined') {
				$scope.contact = {};
			}
			if (typeof window[$scope.prefill] !== 'undefined') {
				var pre = '';
				if (typeof $scope.prefillPrefix !== 'undefined') {
					pre = $scope.prefillPrefix;
				}
				$scope.contact.message = pre + window[$scope.prefill];
			}
			$scope.submitContact = function () {
				var contact = this.scope.contact;
				contact.form = this.scope.contactMessage;
				var api = this.scope.inhouseApi;
				$scope.contactSending = true;
				api.getData({ resource: 'submit-contact', contact: contact }).success(function ($scope) {
					return function (response) {
						delete $scope.contactSending;
						if (response.result == 'success') {
							//tell user it worked
							$scope.contactSent = true;
						} else {
							//notify user it didn't work
							$scope.contactSendFailed = true;
						}
					};
				}($scope));
			};
		}]
	};
}]);

angular.module('ihframework').directive('ihDivider', function () {
	return {
		scope: {
			classes: "@classes"
		},
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.theUrl = function (config) {
				config = 's1';
				return 'build/templates/ic/divider/template/' + config + '-inhouse.divider.htm';
			};
			$scope.agent = $rootScope.theUserData;
		}]
	};
});

angular.module('ihframework').directive('ihDropdown', ['$routeParams', '$timeout', '$location', '$document', function ($routeParams, $timeout, $location, $document) {
	return {
		restrict: 'E',
		templateUrl: function templateUrl(el, attrs) {
			return 'build/templates/ic/dropdown/template/' + (attrs.config || 's1') + '-inhouse.dropdown.htm';
		},
		require: 'ngModel',
		transclude: true,
		scope: {
			'classes': '@',
			'menuItems': '=items',
			'val': '@name',
			'name': '@name',
			'origName': '@name',
			'dropdownId': '@id',
			'truncate': '@truncate',
			'multiSelect': '@multi'
		},
		link: function link(scope, element, attrs, ngModelCtrl) {
			scope.multiSelectList = {};

			if (typeof attrs.class == 'undefined') {
				scope.classes = "ih-search-dropdown dropdown full";
			} else {
				scope.classes = attrs.class;
			}

			scope.$watch(function () {
				return ngModelCtrl.$modelValue;
			}, function (newVal) {
				if (typeof newVal === 'undefined') {
					scope.multiSelectList = {};
					scope.name = scope.origName;
					scope.val = '';
				}
				scope.name = scope.origName;
				if (typeof newVal != 'undefined') {
					if (newVal.indexOf(';') !== -1) {
						var vals = scope.$parent.filters[attrs.id].split(';');
						for (var i = 0; i < vals.length; i++) {
							scope.multiSelectList[vals[i]] = true;
						}
					}
					if (typeof scope.multiSelectList !== 'undefined') {
						var keys = Object.keys(scope.multiSelectList);
						if (keys.length > 1) {
							scope.name = scope.origName + " | " + 'Multiple';
						} else {
							var display = typeof scope.truncate != 'undefined' && scope.truncate != '' ? newVal.substr(0, parseInt(scope.truncate)) : newVal;
							scope.name += ' | ' + display;
						}
					} else {
						var display = typeof scope.truncate != 'undefined' && scope.truncate != '' ? newVal.substr(0, parseInt(scope.truncate)) : newVal;
						scope.name += ' | ' + display;
					}
				}
			});

			scope.selectAttribute = function (val, name, $event) {
				if (_typeof(scope.multiSelectList) == 'object' && scope.multiSelect == 'true') {
					$event.preventDefault();
					if (typeof scope.multiSelectList[val] !== 'undefined') {
						delete scope.multiSelectList[val];
					} else {
						scope.multiSelectList[val] = true;
					}

					val = '';
					var keys = Object.keys(scope.multiSelectList);
					for (var i = 0; i < keys.length; i++) {
						val += ';' + keys[i];
					}
					val = val.substr(1);
				} else {
					// single select
					var display = typeof scope.truncate != 'undefined' && scope.truncate != '' ? name.substr(0, parseInt(scope.truncate)) : name;
					scope.name = scope.origName + " | " + display;
				}
				scope.val = val;
				ngModelCtrl.$setViewValue(val);
				if (typeof scope.multiSelect !== 'undefined' && scope.multiSelect == 'true') {
					$event.preventDefault();
					return false;
				} else {
					scope.dropdownOpen = false;
				}
			};

			$timeout(function (scope, element, attrs) {
				return function () {
					var newval = ngModelCtrl.$modelValue;
					if (scope.multiSelect == 'true') {
						element.find('a').click(function (e) {
							e.stopPropagation;
							e.preventDefault();
							return false;
						});
					}
					if (typeof scope.$parent.filters !== 'undefined' && typeof scope.$parent.filters[attrs.id] !== 'undefined') {
						if (scope.$parent.filters[attrs.id].indexOf(';') !== -1) {
							var vals = scope.$parent.filters[attrs.id].split(';');
							for (var i = 0; i < vals.length; i++) {
								scope.multiSelectList[vals[i]] = true;
							}
						}
						if (typeof scope.multiSelectList !== 'undefined' && scope.multiSelect == 'true') {
							var keys = Object.keys(scope.multiSelectList);
							if (keys.length > 1) {
								scope.name = scope.origName + " | " + 'Multiples';
							} else {
								var display = typeof scope.truncate != 'undefined' && scope.truncate != '' ? newVal.substr(0, parseInt(scope.truncate)) : newVal;
								scope.name += ' | ' + display;
							}
						} else {
							scope.name = scope.origName + " | " + scope.val;
						}
						scope.val = scope.$parent.filters[attrs.id];
						ngModelCtrl.$setViewValue(scope.val);
					}
				};
			}(scope, element, attrs));
		}
	};
}]);

angular.module('ihframework').directive('ihFeaturedListings', ['inhouseApi', '$timeout', function (inhouseApi, $timeout) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		replace: true,
		scope: {
			classes: "@classes",
			pull: '@',
			slider: '='
		},
		controller: ["$rootScope", "$scope", "userDataService", function controller($rootScope, $scope, userDataService) {
			$scope.config = userDataService.featuredListingsConfig;
			$scope.theUrl = function () {
				return 'build/templates/ic/featured-listings/template/' + $scope.config + '-inhouse.featured-listings.htm';
			};

			$scope.maxFeaturedListings = $rootScope.theWebsiteData.maxFeaturedListings || 4;
			$scope.LandingComponent = $rootScope.theWebsiteData.FeaturedListings;
			$scope.agent = $rootScope.theUserData;
			$scope.listingLoaders = 10;
			$scope.range = function (min, max, step) {
				step = step || 1;
				var input = [];
				for (var i = min; i < max; i += step) {
					input.push(i);
				}
				return input;
			};
		}],
		link: function link(scope, element, attrs) {
			$timeout(function () {
				element.find('.ih-ft-carousel').owlCarousel({
					mouseDrag: false,
					items: 4,
					nav: true,
					margin: 10,
					autoplay: false,
					autoplayHoverPause: true,
					responsiveClass: true,
					responsive: {
						0: {
							items: 1
						},
						480: {
							items: 1
						},
						768: {
							items: 2
						},
						1024: {
							items: 4
						}
					}
				});
			});
			if (typeof scope.pull !== 'undefined') {
				inhouseApi.getData({ resource: 'featured-listings', 'featured-listings': scope.slider + '-featured' }).success(function (response) {
					//destroy owl carousel
					scope.listingLoaders = 0;
					if (typeof element.find('.ih-ft-carousel').data('owlCarousel') !== 'undefined') {
						element.find('.ih-ft-carousel').data('owlCarousel').destroy();
						element.find('.ih-ft-carousel').removeClass('owl-carousel owl-loaded owl-text-select-on');
					}
					scope.homes = response.response.listings;

					$timeout(function () {
						element.find('.ih-ft-carousel').owlCarousel({
							mouseDrag: false,
							items: 4,
							nav: true,
							margin: 10,
							autoplay: false,
							autoplayHoverPause: true,
							responsiveClass: true,
							responsive: {
								0: {
									items: 1
								},
								480: {
									items: 1
								},
								768: {
									items: 2
								},
								1024: {
									items: 4
								}
							}
						});
					});
				});
			} else {
				scope.$on('storyLoaded', function (event, args) {
					//destroy owl carousel
					scope.listingLoaders = 0;
					if (typeof element.find('.ih-ft-carousel').data('owlCarousel') !== 'undefined') {
						element.find('.ih-ft-carousel').data('owlCarousel').destroy();
						element.find('.ih-ft-carousel').removeClass('owl-carousel owl-loaded owl-text-select-on');
					}
					$timeout(function () {
						element.find('.ih-ft-carousel').owlCarousel({
							mouseDrag: false,
							items: 4,
							nav: true,
							margin: 10,
							autoplay: false,
							autoplayHoverPause: true,
							responsiveClass: true,
							responsive: {
								0: {
									items: 1
								},
								480: {
									items: 1
								},
								768: {
									items: 2
								},
								1024: {
									items: 4
								}
							}
						});
					});

					scope.query = args.featuredListings.query;
					scope.homes = args.featuredListings.listings;
				});
			}
		}
	};
}]);

angular.module('ihframework').directive('ihFooter', ['$window', function ($window) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		scope: {
			classes: "@classes",
			maxNavColumns: "@navColumns"
		},
		restrict: 'E',
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.config = $rootScope.theWebsiteData.footerConfig;
			$scope.theUrl = function () {
				return 'build/templates/ic/footer/template/' + $scope.config + '-inhouse.footer.htm';
			};

			$scope.NavBar = $rootScope.theWebsiteData.NavBar;
			$scope.footerColumns = [];

			$scope.$on('viewChanged', function (event, args) {
				$scope.controller = args;
			});
			if ($scope.maxNavColumns === undefined) {
				//default to 2 columns
				$scope.maxNavColumns = 2;
			}
			for (var i = 0; i < $scope.NavBar.length; i++) {
				if ($scope.NavBar[i].type == 'menu') {
					$scope.footerColumns.push($scope.NavBar[i]);
				}
			}
			$scope.agent = $rootScope.theUserData;
			$scope.$on('hideFooter', function () {
				$scope.showFooter = false;
			});
			$scope.$on('showFooter', function () {
				$scope.showFooter = true;
			});
		}]
	};
}]);

angular.module('ihframework').directive('ihGmaps', function () {
	return {
		template: '<div></div>',
		replace: true,
		restrict: 'E',
		scope: {
			center: '@',
			classes: '@'
		},
		link: function link(scope, element, attrs) {
			scope.$on('listingLoaded', function (event, args) {
				if (typeof args.latlong === 'undefined') {
					var geocoder = new google.maps.Geocoder();
					geocoder.geocode({ 'address': args.address + ' ' + (args.zipcode !== undefined ? args.zipcode : '') }, function (results, status) {
						if (status == google.maps.GeocoderStatus.OK) {
							scope.center = results[0].geometry.location;
							scope.map = new google.maps.Map(element[0], {
								center: scope.center,
								mapTypeId: google.maps.MapTypeId.HYBRID,
								zoom: 19
							});
							scope.marker = new google.maps.Marker({
								position: scope.center,
								map: scope.map,
								title: args.address,
								icon: 'ia/icons/map-pin.png'
							});
						}
					});
				} else {
					scope.center = { lat: parseFloat(args.latlong.split(',')[0]), lng: parseFloat(args.latlong.split(',')[1]) };
					scope.map = new google.maps.Map(element[0], {
						center: scope.center,
						mapTypeId: google.maps.MapTypeId.SATELLITE,
						zoom: 19
					});
					scope.marker = new google.maps.Marker({
						position: scope.center,
						map: scope.map,
						title: args.address,
						icon: 'ia/icons/map-pin.png'
					});
				}
			});
		}
	};
});

angular.module('ihframework').directive('ihLandingLayout', ['$window', '$rootScope', function ($window, $rootScope) {
	return {
		template: function template() {
			var dirs = $rootScope.theWebsiteData.landingLayout;
			var beginningDivTag = '<div>',
			    others = ' ',
			    template = '';

			dirs.map(function (item, index, array) {
				var keys = Object.keys(item),
				    attributes = '';

				for (var key in item) {
					attributes += key + '=\"' + item[key] + '\" ';
				}

				template += '<ih-' + item.component + others + attributes + '></ih-' + item.component + '>';
			});

			return beginningDivTag + template + '</div>';
		},
		replace: true,
		restrict: 'E'
	};
}]);
//
// <div>
// 	<ih-slider config="s1" slider="mainSlider" ></ih-slider>
// 	<ih-landing-search ></ih-landing-search>
// 	<ih-divider config="logo" ></ih-divider>
// 	<ih-about config="s1" ></ih-about>
// 	<ih-featured-listings config="s1"></ih-featured-listings>
// 	<ih-testimonials config="s1" testimonial="mainTests" ></ih-testimonials>
// 	<ih-contact config="s1" message="How can we help?" ></ih-contact>
// </div>

angular.module('ihframework').directive('ihLandingSearch', ['$location', function ($location) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		replace: true,
		scope: {
			classes: "@classes"
		},
		controller: ["$rootScope", "$scope", "userDataService", function controller($rootScope, $scope, userDataService) {
			$scope.config = userDataService.landingSearchConfig;

			$scope.theUrl = function () {
				return 'build/templates/ic/landing-search/template/' + $scope.config + '-inhouse.landing-search.htm';
			};

			$scope.agent = $rootScope.theUserData;
			$scope.filters = { active: true };
			$scope.toggleButton = function ($event, val) {
				if (!$($event.target).hasClass('active')) {
					this.filters[val] = true;
				} else {
					if (typeof this.filters[val] != 'undefined') {
						delete this.filters[val];
					}
				}
			};
			$scope.searchMLS = function () {

				if (typeof this.filters != 'undefined') {
					this.filters.active = true;
				}

				if (typeof this.filters.mlsOrAddress !== 'undefined') {
					//trim whitespace
					this.filters.mlsOrAddress = this.filters.mlsOrAddress.trim();

					//no spaces
					if (this.filters.mlsOrAddress.indexOf(' ') == -1) {
						this.filters.mls = this.filters.mlsOrAddress;
					} else {
						this.filters.address = this.filters.mlsOrAddress;
					}

					delete this.filters.mlsOrAddress;
				}

				//price filter split
				if (typeof this.filters.price_from !== 'undefined') {
					this.filters.price = this.filters.price_from + ';';
				}
				if (typeof this.filters.price_to !== 'undefined') {
					if (typeof this.filters.price == 'undefined') {
						this.filters.price = "0;";
					}
					this.filters.price += this.filters.price_to;
				}
				delete this.filters.price_from;
				delete this.filters.price_to;

				//beds filter split
				if (typeof this.filters.min_beds !== 'undefined') {
					this.filters.bedsRange = this.filters.min_beds + ';';
				}
				if (typeof this.filters.max_beds !== 'undefined') {
					if (typeof this.filters.bedsRange == 'undefined') {
						this.filters.bedsRange = "0;";
					}
					this.filters.bedsRange += this.filters.max_beds;
				}
				delete this.filters.max_beds;
				delete this.filters.min_beds;

				//sqft filter split
				if (typeof this.filters.min_sqft !== 'undefined') {
					this.filters.sqft = this.filters.min_sqft + ';';
				}
				if (typeof this.filters.max_sqft !== 'undefined') {
					if (typeof this.filters.sqft == 'undefined') {
						this.filters.sqft = "0;";
					}
					this.filters.sqft += this.filters.max_sqft;
				}
				delete this.filters.max_sqft;
				delete this.filters.min_sqft;

				//acres filter split
				if (typeof this.filters.min_acres !== 'undefined') {
					this.filters.lotsizeRange = this.filters.min_acres + ';';
				}
				delete this.filters.min_acres;

				$location.path('search-mls').search(this.filters);
			};
		}],
		link: function link(scope, element, attrs) {
			scope.$on('storyLoaded', function (event, args) {
				scope.LandingSearch = args.LandingSearch;
			});
		}
	};
}]);

angular.module('ihframework').directive('ihLikeButton', ['inhouseApi', function (inhouseApi) {
	return {
		replace: true,
		templateUrl: 'build/templates/ic/like-button/template/s1-inhouse.like-button.htm',
		restrict: 'E',
		scope: {
			mls: '@mls',
			address: '@address'
		},
		controller: ["$scope", function controller($scope) {
			$scope.likeButton = function ($event) {
				data = {};
				var button = $($event.target).parent();
				data.mls = $scope.mls;
				data.address = data.address = $scope.address;
				if (typeof Storage !== 'undefined') {
					if (typeof localStorage.inhouseAgentUser !== 'undefined') {
						inhouseApi.getData({ resource: 'lead-like-listing', mls: data.mls, address: data.address }).success(function (el) {
							return function (response) {
								if (response.code == '200') {
									el.addClass('ih-liked'); //todo: change this to whatever class marks it as liked!
								}
							};
						}(button));
					} else {
						//have them register
						$('#accountModal').modal('show');
						$('#accountModal').on('hidden.bs.modal', function (data, el) {
							return function () {
								if (typeof Storage !== 'undefined' && typeof localStorage.inhouseAgentUser !== 'undefined') {
									inhouseApi.getData({ resource: 'lead-like-listing', mls: data.mls, address: data.address }).success(function (response) {
										if (response.code == '200') {
											el.addClass('ih-liked'); //todo: change this to whatever class marks it as liked!
										}
										$('#accountModal').off('hidden.bs.modal');
									});
								}
							};
						}(data, $(this)));
					}
				}
				$event.preventDefault();
				$event.stopPropagation();
			};
		}]
	};
}]);

angular.module('ihframework').directive('ihListingDetails', [function (inhouseApi, $timeout) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		replace: true,
		scope: {
			classes: "@classes"
		},
		controller: ["$scope", function controller($scope) {
			$scope.theUrl = function (config) {
				config = 's1';
				return 'build/templates/ic/listing-details/template/' + config + '-inhouse.listing-details.htm';
			};
		}],
		link: function link(scope, element, attrs) {
			scope.$on('listingLoaded', function (event, args) {
				scope.listing = args;
			});
		}
	};
}]);

angular.module('ihframework').directive('ihListingLoader', ['$rootScope', '$routeParams', '$timeout', '$location', function ($rootScope, $routeParams, $timeout, $location) {
	return {
		scope: {
			config: '@',
			classes: "@classes"
		},
		replace: true,
		templateUrl: function templateUrl(el, attrs) {
			return 'build/templates/ic/listing-loader/template/' + (attrs.config || 's1') + '-inhouse.listing-loader.htm';
		},
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.agent = $rootScope.theUserData;
		}],
		link: function link(scope) {}
	};
}]);

angular.module('ihframework').directive('ihListingMap', ['$filter', '$interpolate', '$templateCache', '$http', function ($filter, $interpolate, $templateCache, $http) {
	return {
		template: '<div></div>',
		replace: true,
		restrict: 'E',
		scope: {
			center: '@'
		},
		link: function link(scope, element, attrs) {
			scope.map = new google.maps.Map(element[0], {
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				zoom: 19
			});
			scope.bounds = new google.maps.LatLngBounds();
			scope.markers = [];

			scope.pF = $filter('currency');

			scope.contentTemplate = $templateCache.get('build/templates/ic/listing-map/template/inhouse.gmap-popup.htm');

			scope.$on('refreshMap', function (event, args) {
				google.maps.event.trigger(scope.map, 'resize');
				scope.map.fitBounds(scope.bounds);
			});
			scope.$on('resultsCleared', function (event, args) {
				for (var i = 0; i < scope.markers.length; i++) {
					scope.markers[i].setMap(null);
				}
			});
			scope.$on('focusListing', function (event, args) {
				scope = event.currentScope;
				for (var i = 0; i < scope.infoWinds.length; i++) {
					scope.infoWinds[i].close();
				}
				scope.infoWinds[args].open(scope.map, scope.markers[args]);
			});
			scope.$on('blurListing', function (event, args) {
				scope = event.currentScope;
				scope.infoWinds[args].close();
			});
			scope.$on('resultsLoaded', function (event, args) {
				var bounds = new google.maps.LatLngBounds();
				scope = event.currentScope;
				//wipe markers
				for (var i = 0; i < scope.markers.length; i++) {
					scope.markers[i].setMap(null);
				}
				scope.markers = [];
				scope.infoWinds = [];

				//set new markers
				for (var i = 0; i < args.length; i++) {
					scope.listing = args[i];
					var info = new google.maps.InfoWindow({
						content: $interpolate(scope.contentTemplate)(scope)
					});
					scope.infoWinds.push(info);
					var marker = new google.maps.Marker({
						position: { lat: parseFloat(args[i].latlong.split(',')[0]), lng: parseFloat(args[i].latlong.split(',')[1]) },
						map: scope.map,
						title: args[i].address,
						icon: 'ia/icons/map-pin.png'
					});
					marker.addListener('click', function (map, marker, infoWindow) {
						return function () {
							infoWindow.open(map, marker);
						};
					}(scope.map, marker, info));

					scope.markers.push(marker);
					bounds.extend(scope.markers[i].position);
				}
				scope.bounds = bounds;
				scope.map.fitBounds(scope.bounds);
			});
		}
	};
}]);

angular.module('ihframework').directive('ihModal', [function () {
	return {
		restrict: 'E',
		scope: {
			config: '@',
			id: '@',
			confirm: '@'
		},
		template: "<div ng-include='templateUrl()'></div>",
		link: function link(scope, element, attrs) {
			scope.templateUrl = function () {
				return 'build/templates/ic/modal/template/' + (scope.config || 's1') + '-modal.inhouse.htm';
			};
			scope.$on('showModal', function (event, args) {
				scope.modal = args.modal;
				if (scope.id == args.id) {
					element.find('.modal').modal('show');
				}
			});
			element.find('.modal').on('bs.modal.hide', function () {
				scope.$emit('modalClosed', { modal: scope.id });
			});
		},
		controller: ["$scope", function controller($scope) {}]
	};
}]);

angular.module('ihframework').directive('ihNavbar', ['$rootScope', '$window', function ($rootScope, $window) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		scope: {
			classes: "@classes"
		},
		restrict: 'E',
		controller: ["$rootScope", "$scope", "$filter", function controller($rootScope, $scope, $filter) {
			$scope.config = $rootScope.theWebsiteData.navbarConfig;
			$scope.theUrl = function () {
				return 'build/templates/ic/navbar/template/' + $scope.config + '-inhouse.navbar.htm';
			};

			$scope.$on('viewChanged', function (event, args) {
				$scope.controller = args;
			});
			$scope.signIn = function () {
				this.$parent.$parent.showRegister = false;
				$('#accountModal').modal('show');
			};
			$scope.$on('loginChanged', function (event, args) {
				$scope.inhouseAgentUserLoggedIn = args;
			});
			$scope.inhouseAgentUserLoggedIn = $scope.$parent.inhouseAgentUserLoggedIn;
			$scope.navbar = $rootScope.theWebsiteData.NavBar;
			$scope.halfway = Math.ceil($scope.navbar.length / 2);
			if (typeof $rootScope.theWebsiteData.navbarClasses !== 'undefined') {
				$scope.classes = $rootScope.theWebsiteData.navbarClasses;
			}
			$scope.agent = $rootScope.theUserData;
		}]

	};
}]);

angular.module('ihframework').directive('ihNearby', function () {
	return {
		scope: {
			classes: "@classes"
		},
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.theUrl = function (config) {
				config = 'p1';
				return 'build/templates/ic/nearby/template/' + config + '-inhouse.nearby.htm';
			};
			$scope.agent = $rootScope.theUserData;
			console.log('testings3');
		}]
	};
});

angular.module('ihframework').directive('ihPartners', ['$window', '$timeout', function ($window, $timeout) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		replace: true,
		scope: {
			classes: "@classes"
		},
		controller: ["$rootScope", "$scope", function controller($rootScope, $scope) {
			$scope.theUrl = function (config) {
				config = 's1';
				return 'build/templates/ic/partners/template/' + config + '-inhouse.partners.htm';
			};
			$scope.partners = $rootScope.theWebsiteData.partners;
		}],
		link: function link(scope, element, attrs) {

			$timeout(function () {
				element.find(".owl-carousel.partner-carousel").owlCarousel({
					loop: true,
					margin: 15,
					nav: false,
					responsive: {
						0: {
							items: 1
						},
						600: {
							items: 3
						},
						1000: {
							items: 5
						}
					}
				});
			});
		}
	};
}]);

angular.module('ihframework').directive('ihPhotoSlider', function () {
	return {
		restrict: 'E',
		template: '<ng-include src="theUrl"></ng-include>',
		link: function link(scope, elem, attrs) {
			attrs.config = 'p1';
		},
		controller: ["$rootScope", "$scope", "listingService", function controller($rootScope, $scope, listingService) {
			$scope.listing = {
				listingDescription: '',
				photos: []
			};
			$scope.theUrl = 'ic/photo-slider/template/p1-inhouse.photo-slider.htm';
			listingService.getListings().then(function (res) {
				console.log(res);
				$scope.listing.listingDescription = res.data.listing.publicRemarks;
				res.data.listing.photos.map(function (item, index, arr) {
					$scope.listing.photos.push(item.thumb);
				});
				console.log($scope.listing);
			});
		}]
	};
});

angular.module('ihframework').directive('ihResources', function () {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		scope: {
			classes: "@classes"
		},
		restrict: 'E',
		controller: ["$rootScope", "$scope", "userDataService", function controller($rootScope, $scope, userDataService) {
			$scope.config = userDataService.resourcesConfig;
			$scope.theUrl = function () {
				return 'build/templates/ic/resources/template/' + $scope.config + '-inhouse.resources.htm';
			};
		}],
		link: function link(scope, el, attrs) {
			scope.limit = attrs.limit || 3;
			var resources = [];
			var featured = [];
			//loop through resources to see if any are featured
			for (var i = 0; i < scope.$root.theUserData.content.length; i++) {
				if (typeof scope.$root.theUserData.content[i].featured !== 'undefined' && scope.$root.theUserData.content[i].featured === true) {
					featured.push(scope.$root.theUserData.content[i]);
				} else {
					resources.push(scope.$root.theUserData.content[i]);
				}
			}
			scope.resources = featured.concat(resources);
		}
	};
});

angular.module('ihframework').directive('ihSlider', ['inhouseApi', '$timeout', function (inhouseApi, $timeout) {
	return {
		template: '<ng-include src="theUrl()"><ng-include>',
		restrict: 'E',
		replace: true,
		scope: {
			slider: '@',
			classes: '@',
			pull: '@',
			nodefault: '@nodefault'
		},
		controller: ["$rootScope", "$scope", "userDataService", function controller($rootScope, $scope, userDataService) {
			$scope.config = userDataService.sliderConfig;
			$scope.theUrl = function () {
				return 'build/templates/ic/slider/template/' + $scope.config + '-inhouse.slider.htm';
			};

			$scope.active = 0;
			$scope.LandingComponent = $rootScope.theWebsiteData.LandingComponent;
			if (_typeof($scope.LandingComponent.defaultSliderImages) === 'object') {
				var rIndex = Math.floor(Math.random() * $scope.LandingComponent.defaultSliderImages.length);
				$scope.LandingComponent.defaultSliderImage = $scope.LandingComponent.defaultSliderImages[rIndex];
			}

			$scope.agent = $rootScope.theUserData;

			$scope.landingLayout = $rootScope.theWebsiteData.landingLayout[0];
		}],
		link: function link(scope, element, attrs) {

			if (scope.pull !== undefined) {
				inhouseApi.getData({ resource: 'slider', slider: scope.slider }).success(function (response) {
					scope.slides = response.response.slides;
					$timeout(function () {
						if (typeof scope.nodefault === 'undefined') {
							element.carousel({
								pause: "false",
								interval: 9999
							});
						}
					});
				});
			} else {
				scope.$on('storyLoaded', function (event, args) {
					scope.slides = args[scope.slider].slides;
					$timeout(function () {
						element.carousel({
							pause: "false",
							interval: 9999
						});
					});
				});
			}
			scope.$emit('sliderLoaded', { slider: scope.slider });
		}
	};
}]);

angular.module('ihframework').directive('ihTestimonials', ['$timeout', function ($timeout) {
	return {
		templateUrl: function templateUrl(el, attrs) {
			return 'build/templates/ic/testimonials/template/' + (attrs.config || 's1') + '-inhouse.testimonials.htm';
		},
		restrict: 'E',
		replace: true,
		scope: {
			testimonial: '@',
			classes: '@',
			source: '@',
			max: '@'
		},
		controller: ["$rootScope", "$scope", "userDataService", function controller($rootScope, $scope, userDataService) {
			$scope.config = userDataService.testimonialsConfig;
			$scope.theUrl = function () {
				return 'build/templates/ic/testimonials/template/' + $scope.config + '-inhouse.testimonials.htm';
			};

			$scope.LandingComponent = $rootScope.theWebsiteData.LandingComponent;
			$scope.agent = $rootScope.theUserData;
			$scope.range = function (min, max, step) {
				step = step || 1;
				var input = [];
				for (var i = min; i <= max; i += step) {
					input.push(i);
				}
				return input;
			};
		}],
		link: function link(scope, element, attrs) {
			if (typeof scope.source !== 'undefined' && scope.source == 'storySettings') {
				if (typeof $rootScope.theWebsiteData.testimonials !== 'undefined') {
					scope.testimonials = $rootScope.theWebsiteData.testimonials;
				}
				console.log('nothing');
			}
			if (typeof scope.source === 'undefined' || scope.source == 'hybrid' || scope.source == 'zillow') {
				scope.showZillow = true;
				scope.$on('storyLoaded', function (event, args) {
					scope.testimonials = [];
					scope.testimonials = args[scope.testimonial].testimonials;
					console.log(scope.testimonials);

					if ((typeof scope.source === 'undefined' || scope.source == 'hybrid') && _typeof(scope.$root.theWebsiteData.testimonials) === 'object') {
						for (var i = 0; i < scope.$root.theWebsiteData.testimonials.length; i++) {
							scope.testimonials.unshift(scope.$root.theWebsiteData.testimonials[i]);
						}
					}
					$timeout(function () {
						console.log(element.find('.owl-carousel').length);
						if (element.find('.owl-carousel').length > 0) {
							var params = {};
							if (typeof scope.max !== 'undefined' && scope.max != '') {
								scope.max = parseInt(scope.max);
								params.items = scope.max;
							}

							var testimonialsIndex = 0;
							scope.$root.theWebsiteData.landingLayout.map(function (item, index, arr) {
								if (item.responsive) {
									testimonialsIndex = index;
								}
							});

							if (scope.$root.theWebsiteData.landingLayout[testimonialsIndex].responsive) {
								params.responsive = scope.$root.theWebsiteData.landingLayout[testimonialsIndex].responsive;
							}
							console.log('2', element);
							element.find('.owl-carousel').owlCarousel(params);
						} else {
							var params = {
								pause: "true",
								interval: 9999
							};
							console.log(element);
							element.carousel(params);
						}
					});
				});
			}
		}
	};
}]);

angular.module('ihframework').factory('inhouseApi', ["$http", "$rootScope", function ($http, $rootScope) {
	var urlBase = 'https://www.getinhouse.io/api/v1/';
	var inhouseApi = {};
	var userId = $rootScope.theUserData.userId;
	var userHash = $rootScope.theUserData.userHash;

	inhouseApi.getData = function (data) {
		data.userId = userId;
		data.userHash = userHash;
		data.callback = 'JSON_CALLBACK';

		if (typeof Storage !== 'undefined') {
			if (typeof localStorage.inhouseAgentUser !== 'undefined') {
				data.inhouseAgentUser = localStorage.inhouseAgentUser;
			}
		}
		if (typeof window.geolocation !== 'undefined') {
			if (typeof data.params === 'undefined') {
				data.params = {};
			}
			data.params.geolocation = window.geolocation;
		}

		var url = urlBase + (typeof data.resource !== 'undefined' ? data.resource : '') + '?' + $.param(data);

		var result = $http.jsonp(url);
		return result;
	};

	return inhouseApi;
}]);

angular.module('ihframework').filter('words', function () {
	return function (text) {
		if (typeof text == 'string') {
			return text.substr(0, text.lastIndexOf(' '));
		} else {
			return '';
		}
	};
}).filter('encode', function () {
	return window.encodeURIComponent;
}).filter('sentence', function () {
	return function (str) {
		if (typeof str !== 'undefined') {
			str = str.replace(/ +(?= )/g, ' ').replace(/[!.-]{2,}/, '!');
			var ret = '';
			var strs = str.split(/\. |\! /);
			for (var i = 0; i < strs.length; i++) {
				ret += strs[i].charAt(0).toUpperCase() + strs[i].slice(1).toLowerCase() + '.';
				if (i != strs.length - 1) ret += ' ';
			}
			return ret;
		}
	};
}).filter('tel', function () {
	return function (tel) {
		if (!tel) {
			return '';
		}

		var value = tel.toString().trim().replace(/^\+/, '');

		if (value.match(/[^0-9]/)) {
			return tel;
		}

		var country, city, number;
		switch (value.length) {
			case 10:
				// +1PPP####### -> C (PPP) ###-####
				country = 1;
				city = value.slice(0, 3);
				number = value.slice(3);
				break;

			case 11:
				// +CPPP####### -> CCC (PP) ###-####
				country = value[0];
				city = value.slice(1, 4);
				number = value.slice(4);
				break;

			case 12:
				// +CCCPP####### -> CCC (PP) ###-####
				country = value.slice(0, 3);
				city = value.slice(3, 5);
				number = value.slice(5);
				break;

			default:
				return tel;
		}

		if (country == 1) {
			country = "";
		}

		number = number.slice(0, 3) + '-' + number.slice(3);

		return (country + " (" + city + ") " + number).trim();
	};
}).filter('split', function () {
	return function (input, splitChar, splitIndex) {
		// do some bounds checking here to ensure it has that index
		return input.split(splitChar)[splitIndex];
	};
}).filter('to_trusted', ['$sce', function ($sce) {
	return function (text) {
		return $sce.trustAsHtml(text);
	};
}]).filter('startFrom', function () {
	return function (input, start) {
		if (input) {
			start = +start; //parse to int
			return input.slice(start);
		}
		return [];
	};
});

angular.module('ihframework').controller('bioController', ['$rootScope', '$scope', '$routeParams', 'inhouseApi', '$timeout', '$sce', function ($rootScope, $scope, $route, inhouseApi, $timeout, $sce) {
	$('.ih-content-body').addClass('hidden');
	$scope.bioAgent = $rootScope.theUserData.bio[$route.agent];
	$scope.$parent.windowTitle = ' | ' + $scope.bioAgent.name;
	$timeout(function () {
		$scope.$broadcast('contentLoaded', $scope.listing);
		$('#main-view').removeClass('load-overlay');
		$('.ih-content-body').removeClass('hidden');
		$('.content-loader').addClass('hidden');
	});
}]);

angular.module('ihframework').controller('contentController', ['$rootScope', '$compile', '$templateRequest', '$scope', '$routeParams', 'inhouseApi', '$timeout', '$sce', '$location', function ($rootScope, $compile, $templateRequest, $scope, $route, inhouseApi, $timeout, $sce, $location) {
	if (typeof $rootScope.theUserData.content[$route.content] === 'undefined') {
		var content = $rootScope.theUserData.content;
		for (var i = 0; i < content.length; i++) {
			if (content[i].key == $route.content) {
				$scope.content = content[i];
				break;
			}
		}
	} else {
		$scope.content = $rootScope.theUserData.content[$route.content];
	}
	if (_typeof($rootScope.theWebsiteData.featuredCommunities) == 'object') {
		$scope.featuredCommunities = $rootScope.theWebsiteData.featuredCommunities;
	} else {
		$scope.featuredCommunities = [{ "name": "Canada Hills", "value": "Canada Hills" }, { "name": "Cobblestone", "value": "Cobblestone" }, { "name": "Continental Ranch", "value": "Continental Ranch" }, { "name": "Continental Reserve", "value": "Continental Reserve" }, { "name": "Dorado CC Estates", "value": "Dorado Country Club Estates" }, { "name": "Dove Mountain", "value": "dove mountain*" }, { "name": "Fairfield", "value": "Fairfield" }, { "name": "Gladden Farms", "value": "Gladden Farms" }, { "name": "Hillcrest at Wingate", "value": "Hillcrest at Wingate" }, { "name": "Indian Ridge", "value": "Indian Ridge" }, { "name": "La Paloma", "value": "La Paloma" }, { "name": "La Reserve", "value": "La Reserve" }, { "name": "Midvale", "value": "Midvale" }, { "name": "None", "value": "None" }, { "name": "North Ranch", "value": "North Ranch" }, { "name": "Oro Valley CC", "value": "oro valley c*" }, { "name": "Rancho Del Lago", "value": "Rancho Del Lago" }, { "name": "Rancho Sahuarita", "value": "Rancho Sahuarita" }, { "name": "Rancho Vistoso", "value": "Rancho Vistoso" }, { "name": "Rita Ranch", "value": "Rita Ranch" }, { "name": "Sabino Springs", "value": "Sabino Springs" }, { "name": "Sabino Vista", "value": "Sabino Vista" }, { "name": "Salida Del Sol", "value": "Salida Del Sol" }, { "name": "Sam Hughes", "value": "Sam Hughes" }, { "name": "Silverado Hills", "value": "Silverado Hills" }, { "name": "Skyline CC", "value": "oro valley c*" }, { "name": "Starr Pass", "value": "Starr Pass" }, { "name": "Sun City Oro Valley", "value": "Sun City Oro Valley" }, { "name": "Tucson CC", "value": "tucson c*" }, { "name": "Tucson National CC", "value": "tucson national*" }, { "name": "Ventana CC", "value": "ventana c*" }];
	}
	if (typeof $scope.content === 'undefined' || typeof $scope.content.title === 'undefined' || typeof $scope.content.content === 'undefined') {
		if (typeof $scope.content !== 'undefined' && typeof $scope.content.contentUrl !== 'undefined') {} else {
			$location.path('/missing');
		}
	} else {
		$scope.$parent.windowTitle = ' | ' + $scope.content.title;
	}

	$timeout(function () {
		$rootScope.$on("$includeContentLoaded", function (event, templateName) {
			$rootScope.$broadcast('listingLoaded', { address: $rootScope.theUserData.contactAddress + ' ' + $rootScope.theUserData.contactAddress2 });
		});

		$rootScope.$broadcast('listingLoaded', { address: $rootScope.theUserData.contactAddress + ' ' + $rootScope.theUserData.contactAddress2 });
		$scope.$broadcast('contentLoaded', $scope.listing);
	});
}]);

angular.module('ihframework').controller('mainController', ['$scope', 'inhouseApi', function ($scope, inhouseApi) {
	$scope.filters = {};
	inhouseApi.getData({ resource: 'agent-story' }).success(function (response) {
		$scope.$broadcast('storyLoaded', response.response);
	}).error(function () {
		console.log('error loading plugins');
	});
}]);

angular.module('ihframework').controller('listingController', ['$window', '$rootScope', '$scope', '$routeParams', 'inhouseApi', '$timeout', function ($window, $rootScope, $scope, $route, inhouseApi, $timeout) {
	$scope.mls = $route.mls;
	window.mls = $scope.mls;
	$('#main-view').addClass('load-overlay');

	if (typeof $rootScope.theWebsiteData.listingConfig !== 'undefined' && $rootScope.theWebsiteData.listingConfig === 's2') {
		$rootScope.$broadcast('hideFooter');
		$scope.$on('$destroy', function () {
			$rootScope.$broadcast('showFooter');
		});
	}

	$scope.$on('$destroy', function () {
		//prevent the modal from persisting
		$('#accountModal').off('hidden.bs.modal');
		$('#accountModal').modal('hide');
	});
	$scope.shareUrl = "https://www.getinhouse.io/share-listing/" + $rootScope.theUserData.userId + '/' + $scope.mls;
	$scope.getData = function () {
		if (typeof Storage !== 'undefined') {
			if (typeof localStorage.inhouseAgentUser !== 'undefined') {//user is signed in already, load the listing
			} else {
				if (typeof localStorage.inhouseViewedListings !== 'undefined') {
					//user isn't signed in yet, and they have viewed listings already
					if ($rootScope.theWebsiteData.disableLeadSignup !== true) {
						$scope.viewedListings = $.parseJSON(localStorage.inhouseViewedListings);
						if ($scope.viewedListings.indexOf($scope.mls) !== -1) {} else if (localStorage.inhouseSearchFreebies !== 'false' && $scope.viewedListings.length > 2 || localStorage.inhouseSearchFreebies == 'false' && $scope.viewedListings.length > 5) {
							$('#accountModal').modal('show');
							$('#accountModal').off('hidden.bs.modal');
							$('#accountModal').on('hidden.bs.modal', function (scope) {
								return function () {
									$scope.getData();
								};
							}($scope));
							return;
						} else {
							//not at the limit yet. push this mls to the stack
							$scope.viewedListings.push($scope.mls);
							localStorage.inhouseViewedListings = JSON.stringify($scope.viewedListings);
						}
					}
				} else {
					//they haven't viewed any yet, add this to the arr
					$scope.viewedListings = [$scope.mls];
					localStorage.inhouseViewedListings = JSON.stringify($scope.viewedListings);
				}
			}
		}

		inhouseApi.getData({ resource: 'listing/' + $scope.mls }).success(function (response) {
			$scope.listing = response.response.listing[0];
			$scope.url = window.location.href;
			$scope.lightBox = [];

			for (var i = 0; i < $scope.listing.photos.length; i++) {
				$scope.lightBox.push({
					'source': $scope.listing.photos[i].UriLarge,
					'type': 'image',
					'caption': $scope.listing.photos[i].Caption
				});
			}

			$timeout(function () {
				$scope.$broadcast('listingLoaded', $scope.listing);
				$('.ih-owl-carousel').owlCarousel({
					mouseDrag: true,
					autoWidth: true,
					nav: true,
					margin: 10,
					autoplay: false,
					autoplayHoverPause: true
				});
				$('.ih-owl-carousel').find('.owl-item').click(function () {
					var index = $(this).index('.owl-item');
					$('#listingSlider').carousel(index);
				});

				$('#main-view').removeClass('load-overlay');
			});
		});
	};

	$scope.getData();

	$scope.showLightBox = function () {
		UIkit.lightbox.create($scope.lightBox).show();
	};
}]);

angular.module('ihframework').controller('myListingsController', ['$scope', '$routeParams', 'inhouseApi', '$timeout', '$sce', function ($scope, $route, inhouseApi, $timeout, $sce) {
	$scope.content = {};
	$scope.content.title = 'My Listings';
	$scope.content.sub = 'View all my liked listings';

	//	$scope.$parent.windowTitle = ' | ' + $scope.content.title;

	$timeout(function () {
		$scope.$broadcast('contentLoaded', $scope.listing);
	});
}]);

angular.module('ihframework').controller('privacyController', ['$scope', '$routeParams', 'inhouseApi', '$timeout', '$sce', function ($scope, $route, inhouseApi, $timeout, $sce) {
	$timeout(function () {
		$scope.$broadcast('contentLoaded', $scope.listing);
	});
}]);

angular.module('ihframework').controller('searchController', ['$rootScope', '$timeout', '$scope', 'inhouseApi', '$routeParams', '$location', '$window', function ($rootScope, $timeout, $scope, inhouseApi, $routeParams, $location, $window) {
	$scope.$on('$destroy', function () {
		//prevent the modal from persisting
		$('#accountModal').off('hidden.bs.modal');
		$('#accountModal').modal('hide');
	});

	//init lead capture search counting, if in local storage if not zero
	$scope.searchCount = 0;
	if (typeof Storage !== 'undefined') {
		if (typeof localStorage.inhouseSearchCount !== 'undefined') {
			$scope.searchCount = localStorage.inhouseSearchCount;
		}
	}

	if (typeof $rootScope.theWebsiteData.resultsConfig !== 'undefined' && $rootScope.theWebsiteData.resultsConfig === 's2') {
		$rootScope.$broadcast('hideFooter');
		$scope.$on('$destroy', function () {
			$rootScope.$broadcast('showFooter');
		});
	}

	//responsive screensize hiding the map
	if ($window.innerWidth < 1367) {
		$scope.mapShown = false;
	} else {
		$scope.mapShown = true;
	}

	//start off by getting location parameters
	$scope.getGets = function () {
		var gets = {};
		for (var property in $routeParams) {
			if ($routeParams.hasOwnProperty(property)) {
				gets[property] = $routeParams[property];
			}
		}
		$scope.filters = gets;
		if (typeof $scope.filters['near-me'] !== 'undefined') {
			if (typeof navigator.geolocation !== 'undefined') {
				navigator.geolocation.getCurrentPosition(function (scope) {
					return function (geolocation) {
						window.geolocation = geolocation.coords.latitude + ',' + geolocation.coords.longitude;
						scope.searchMLS();
					};
				}($scope), function (scope) {
					return function () {
						scope.failedLocation = true;
					};
				});
			}
		}
	};

	//some logic to prevent double loading
	$scope.noWipe = false;
	$scope.firstLoad = true;

	//these hide and show infoWindows
	$scope.focusListing = function (listing) {
		$scope.$broadcast('focusListing', listing);
	};
	$scope.blurListing = function (listing) {
		$scope.$broadcast('blurListing', listing);
	};

	//loads more listings, increments the pages
	$scope.moreListings = function () {
		$scope.noWipe = true;
		if (typeof $scope.filters.page === 'undefined') {
			$scope.filters.page = 2;
		} else {
			$scope.filters.page++;
		}
	};

	//creates an array to use for ng-repeat
	$scope.range = function (min, max, step) {
		step = step || 1;
		var input = [];
		for (var i = min; i < max; i += step) {
			input.push(i);
		}
		return input;
	};

	//toggles the map view on the results page
	$scope.toggleMaps = function () {
		if ($scope.mapShown) {
			$scope.mapShown = false;
			$timeout(function () {
				$scope.$broadcast('refreshMap');
			});
		} else {
			$scope.mapShown = true;
			$timeout(function () {
				$scope.$broadcast('refreshMap');
			});
		}
	};

	//search mls
	$scope.searchMLS = function () {
		$scope.firstLoad = false;

		if (typeof Storage !== 'undefined') {
			if (typeof localStorage.inhouseAgentUser === 'undefined') {
				if (localStorage.inhouseSearchCount == 0 && localStorage.inhouseSearchFreebies == 'false') {
					$scope.searchCount = 1;
					localStorage.inhouseSearchCount = 1;
				} else {
					localStorage.inhouseSearchCount = $scope.searchCount;
				}
				var max = $rootScope.theWebsiteData.maxSearchNoLead || 3;
				if ($scope.searchCount > max) {
					$('#accountModal').modal('show');
					$('#accountModal').off('hidden.bs.modal');
					$('#accountModal').on('hidden.bs.modal', function (scope) {
						return function () {
							$scope.searchMLS();
						};
					}($scope));
					return;
				} else {
					if ($rootScope.theWebsiteData.disableLeadSignup !== true) {
						$scope.searchCount++;
					}
				}
			}
		}

		if (Object.keys($scope.filters).length > 0) {

			$scope.listingLoaders = 15;
			var params = $scope.filters;

			inhouseApi.getData({ resource: 'search-mls', params: params }).success(function (response) {
				if (typeof response.response != 'undefined' && response.response.length > 0) {
					$scope.totalListings = response.response[0].total_results;
					if (response.response.length == 15) {
						$scope.displayListings = response.response.length * ($scope.filters.page || 1);
					} else {
						$scope.displayListings = response.response[0].total_results;
					}
				} else {
					$scope.totalListings = 0;
					$scope.displayListings = 0;
				}

				$scope.listingLoaders = 0;
				if (!$scope.noWipe) {
					$scope.listings = [];
				}

				$scope.noWipe = false;
				if (typeof $scope.listings == 'undefined') {
					$scope.listings = [];
				}

				for (var i = 0; i < response.response.length; i++) {
					$scope.listings.push(response.response[i]);
				}

				$scope.$broadcast('resultsLoaded', $scope.listings);
				$scope.toggleListView = function () {
					if ($scope.showListView) {
						$scope.showListView = false;
					} else {
						$scope.showListView = true;
					}
				};
			});
		}
	};

	//get the get parameters
	$scope.getGets();

	$scope.removeFilter = function (filter) {
		if (typeof $scope.filters[filter] != 'undefined') {
			delete $scope.filters[filter];
		}
	};

	//refresh gets
	$scope.$on('$locationChangeSuccess', function (event, oldUrl, newUrl) {
		$scope.getGets();
	});

	//trigger mls search on $scope.filter change
	$scope.$watchCollection('filters', function (newFilters, oldFilters) {
		$scope.$broadcast('filtersChanged', newFilters);
		if (newFilters == oldFilters) {
			return;
		}
		if (!$scope.noWipe) {
			if ($scope.filters.page != 1 && !$scope.firstLoad) {
				$scope.changedPage = true;
				$scope.filters.page = 1;
			}
			$scope.listings = [];
			$scope.$broadcast('resultsCleared');
		}

		if (!$scope.changedPage) {
			$scope.searchMLS();
		} else {
			$scope.changedPage = false;
		}

		$location.search($scope.filters);
	});

	//search MLS
	$scope.searchMLS();

	//label click action
	$('.btn-group').find('label').click(function () {
		if ($(this).find('input').is(':checked')) {
			$(this).addClass('active');
		} else {
			$(this).removeClass('active');
		}
	});
}]);

angular.module('ihframework').controller('subdivisionController', ['$rootScope', '$scope', 'inhouseApi', '$window', '$routeParams', function ($rootScope, $scope, inhouseApi, $window, $routeParams) {
	$scope.showModal = function (content) {
		var modal = {};
		if (typeof $scope.subdivision[content] !== 'undefined') {
			modal.title = $scope.subdivision[content].title;
			if (typeof $scope.subdivision[content].content !== 'undefined') {
				modal.body = $scope.subdivision[content].content;
			} else if (typeof $scope.subdivision[content].image !== 'undefined') {
				modal.body = "<img class='img-responsive' src='" + $scope.subdivision[content].image + "'>";
			}
			$scope.$broadcast('showModal', { modal: modal, id: 'subdivModal' });
		}
	};
	if (typeof $rootScope.theWebsiteData.subdivisions !== 'undefined') {
		var subdivs = $rootScope.theWebsiteData.subdivisions;
		for (var i = 0; i < subdivs.length; i++) {
			if (typeof subdivs[i].key !== 'undefined' && subdivs[i].key == $routeParams.sub) {
				$scope.subdivision = subdivs[i];
				break;
			}
		}
	}
}]);

angular.module('ihframework').controller('subfloorplanController', ['$rootScope', '$scope', 'inhouseApi', '$window', '$routeParams', '$timeout', function ($rootScope, $scope, inhouseApi, $window, $routeParams, $timeout) {
	if (typeof $rootScope.theWebsiteData.subdivisions !== 'undefined') {
		var subdivs = $rootScope.theWebsiteData.subdivisions;
		for (var i = 0; i < subdivs.length; i++) {
			if (typeof subdivs[i].key !== 'undefined' && subdivs[i].key == $routeParams.sub) {
				if (typeof subdivs[i].floorplans !== 'undefined') {
					for (var j = 0; j < subdivs[i].floorplans.length; j++) {
						if (subdivs[i].floorplans[j].name == $routeParams.floorplan) {
							$scope.floorplan = subdivs[i].floorplans[j];
							break;
						}
					}
				}
				break;
			}
		}
	}
	$scope.$on('sliderLoaded', function (event, args) {
		if (args.slider == 'floorplans') {
			$scope.$broadcast('storyLoaded', { floorplans: { slides: $scope.floorplan.images } });
		}
	});
}]);

angular.module('ihframework').service('listingService', ["$http", "$q", function ($http, $q) {
	var selectedListing = {};

	var assignSelectedListing = function assignSelectedListing(listing) {
		selectedListing = listing;
	};

	var getSelectedListing = function getSelectedListing() {
		return selectedListing;
	};

	return {
		assignSelectedListing: assignSelectedListing,
		getSelectedListing: getSelectedListing,
		getListings: function getListings() {
			var defer = $q.defer();
			$http({
				url: 'https://inhouse-api.herokuapp.com/api/v1/listing/21613406'
			}).then(function (res) {
				console.log('svc res: ', res);
				defer.resolve(res);
			}, function (err) {
				console.log('svc err: ', err);
			});
			return defer.promise;
		}
	};
}]);

angular.module('ihframework').factory('userData', ["$http", "$q", "$window", function ($http, $q, $window) {

	var theUserData = '',
	    theWebsiteData = '',
	    theSelectedComponent = '';

	function templateBuilder(dirs_two) {
		var templateArray = [];
		dirs_two.landingLayout.map(function (item, index, array) {
			var others = ' ';
			var keys = Object.keys(item),
			    attributes = '';

			for (var key in item) {
				attributes += key + '=\"' + item[key] + '\" ';
			}
			// console.log(templateArray);
			templateArray.push('<ih-' + item.component + others + attributes + '></ih-' + item.component + '>');
		});
		return templateArray;
	}

	return {
		selectedComponent: '',
		theUserData: '',
		theWebsiteData: '',
		getUserData: function getUserData() {
			var defer = $q.defer();

			if (!this.theUserData) {
				$http({
					url: 'api/v1/user-settings',
					method: 'GET'
				}).then(function (res_one) {
					defer.resolve(res_one.data);
				}, function (err) {
					console.log("svc err:, ", err);
				});
				this.theUserData = defer.promise;
			}
			return this.theUserData;
		},
		getWebsiteData: function getWebsiteData() {

			var defer = $q.defer();

			if (!this.theWebsiteData) {
				$http({
					url: 'api/v1/story-settings',
					method: 'GET'
				}).then(function (res_two) {
					defer.resolve(res_two.data);
				}, function (err) {
					console.log("svc err:, ", err);
				});
				this.theWebsiteData = defer.promise;
			}
			return this.theWebsiteData;
		},
		getWebsiteTemplate: function getWebsiteTemplate() {

			var defer = $q.defer();

			$http({
				url: 'api/v1/story-settings',
				method: 'GET'
			}).then(function (res_three) {
				var theTemplateOne = templateBuilder(res_three.data.data).join(',').replace(/,/g, '');
				defer.resolve(theTemplateOne);
			}, function (err) {
				console.log("svc err:, ", err);
			});
			return defer.promise;
		},
		saveWebsiteChanges: function saveWebsiteChanges(website) {

			var defer = $q.defer();
			console.log('the website: ', website);
			$http({
				url: 'api/v1/story-settings',
				method: 'PUT',
				data: { data: website }
			}).then(function (confirmSave) {
				console.log(('confirm save: ', confirmSave));
			}, function (err) {
				console.log("svc err:, ", err);
			});
		}
	};
}]);